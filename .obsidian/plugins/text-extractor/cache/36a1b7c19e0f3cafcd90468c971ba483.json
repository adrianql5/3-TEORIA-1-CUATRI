{"path":"TALF/bibliografía/TALF_ApuntesCompletos.pdf","text":"Exemplos de autómatas sinxelos Máquina expendedora Teoría de autómatas: estudo de \"máquinas\" ou dispositivos abstractos con capacidade de computación. • Turing (1936): estudo dunha máquina abstracta Determinar a fronteira entre o que se pode e o que non se pode facer cun computador. ○ Máquina de Turing:○ • 1940, 1950: autómatas finitos (máis sinxelos ca a máquina de Turing). • Noam Chomsky (finais dos 50): estudo das gramáticas formais. • Cook (1971): separa os problemas que se poden resolver eficientemente dos que non (intratables). • Dispositivo que manipula símbolos sobre unha tira de cinta dacordo cunha táboa de regras, capaz de implementar calquera problema matemático expresado como un algoritmo. UTILIDADE: autómatas [de número de estados] finito(s) Software para o deseño e verificación do comportamento de circuítos dixitais.• Analizador léxico dun compilador.• Software para explorar textos buscando a aparición de certos patróns.• Software para comprobar o funcionamento dun sistema cun número finito de estados diferentes (protocolos de comunicación, de intercambio seguro de información, ...). • Gramáticas Descrición de analizadores sintácticos (parser).○ • Expresións regulares Especificación de patróns de cadeas.○ Deseño do software de verificación do formato de texto en formularios web.○ • Autómatas e complexidade Que pode facer unha computadora? Decidibilidade e computabilidade.○ Que pode facer unha computadora eficientemente? Complexidade.○ • \"O problema de satiisfacibilidade booleana (SAT) é NP-completo\" PazoHISTORIA luns, 25 de setembro de 2023 10:09 T1_introducion página 1 x ∈ X, x ∉ X• X = {1, 2, 3}, X = {x | x ∈ N e x ≤ 3}• X ⊆ N• X ∪ Y = {z | z ∈ X ou z ∈ Y}• X ∩ Y = {z | z ∈ X e z ∈ Y}• X – Y = {z | z ∈ X e z ∉ Y}• Complemento de X respecto a U: • Leis de DeMorgan: , • Cardinalidade: tamaño dun conxunto, Finito▪ Infinito contable ou numerable: correspondencia un a un cos números naturais ○ incontable○ ▪ • ALFABETOS E PALABRAS Alfabeto: conxunto finito non baleiro de símbolos, ∑.• Cadea ou palabra: secuencia finita de símbolos pertencentes a un alfabeto. Cadea baleira: λ, ε○ Lonxitude da cadea: ○ • Potencias dun alfabeto: conxunto de todas as cadeas dunha certa lonxitude que se poden formar cun alfabeto. ○ Clausura positiva: unión de todas as potencias do alfabeto ata o infinito. ○ Cierre ou clausura: unión da clausura positiva e a cadea baleira. ○ • OPERACIÓNS CON PALABRAS Concatenación de palabras: sexan x e y dúas cadeas, xy é a súa concatenación.• Potencia: a potencia i-ésima dunha palabra x, , fórmase pola concatenación i veces de x.• Reflexión: se a palabra x está formada polos símbolos ... , entón a palabra inversa de x, , fórmase invertindo a orda dos símbolos na palabra. = ... . • LINGUAXES Dado un alfabeto ∑, calquera L ⊆ vai ser unha linguaxe de ∑. O alfabeto sobre o que se defina a linguaxe debe ser finito, aínda que a linguaxe pode ter un número infinito de cadeas. Un autómata de numero de estados finito ten, por definición, un número finito de estados; pero pode recoñecer un número infinito de cadeas dunha linguaxe. p.e.: calquera cadea en binario que teña un 1 no medio, independentemente do número de 0 que veñan antes e 0 e 1 que vaian despois Exemplos: Linguaxe baleira: ▫ Linguaxe que contén únicamente a cadea baleira: {λ} ▫ L = {w | w contén o mesmo número de 0 ca de 1} ▫ L = { | n ≥ 1}▫ L = { | j = i+k e i, j, k > 0}▫ Pazo TEORÍA DE CONXUNTOS luns, 25 de setembro de 2023 10:09 T1_introducion página 2 Unión: , vai conter todas as palabras que pertenzan a calquera dos dous.• Intersección: , vai conter todas as palabras que pertenzan a ambos.• Resta: , vai conter todas as palabras que pertenzan a e non a .• Concatenación: , vai conter todas as palabras que se poidan formar pola concatenación dunha palabra de e outra de . • Potencia: a potencia i-ésima dunha linguaxe é a concatenación i veces da linguaxe consigo mesma.• Reflexión: , está formada pola aplicación da reflexión a cada unha das palabras da linguaxe.• GRAMÁTICAS E AUTÓMATAS Unha gramática establece a estrutura dunha linguaxe, é dicir, as sentencias que o forman; proporcionando as formas válidas nas que se poden combinar os símbolos do alfabeto. Noam Chomsky (Filadelfia, 1928) Lingüista, filósofo, politólogo e activista estadounidense. CLASIFICACIÓN DAS GRAMÁTICAS G0 ou Tipo 0: gramáticas sen restricións.❖ G1 ou Tipo 1: gramáticas sensibles ao contexto.❖ G2 ou Tipo 2: gramáticas independentes do contexto.❖ G3 ou Tipo 3: gramáticas regulares❖ ⊆ ⊆ ⊆ Cada gramática é capaz de xerar un tipo de linguaxe. A linguaxe L será de tipo \"i\" (i=0 1, 2, 3) se existe unha gramática de tipo \"i\" capaz de xerala ou describila. Pazo Unha máquina abstracta ou autómata é un dispositivo teórico capaz de recibir e transmitir información. Produce unha cadea de símbolos á saída en función da cadea de símbolos que se presente á súa entrada e dos estados internos polos que transita. OPERACIÓNS CON LINGUAXES martes, 26 de setembro de 2023 11:25 T1_introducion página 3 Os autómatas [de número de estados] finito(s) son máquinas secuenciais (Mealy ou Moore) que recoñecen as linguaxes regulares. Clasifícanse: Deterministas (AFD): o autómata non pode estar en máis dun estado simultáneamente. ▫ Non deterministas (AFN): pode estar en varios estados ao mesmo tempo. ▫ O non determinismo non engade ningunha linguaxe aos xa definidos polos AFD; só aumenta a eficiencia na descrición dunha aplicación. AUTÓMATAS FINITOS DETERMINISTAS (AFD) Determinista: para cada entrada existe un único estado ao que o autómata pode chegar partindo do actual. • Un AFD consta de: Un conxunto finito de estados, Q.○ Un conxunto finito de símbolos de entrada, S.○ Unha función de transición (δ) que, dados un estado e unha entrada, devolve un estado; δ .○ Un estado inicial (un dos estados de Q), .○ Un conxunto de estados finais ou de aceptación (subconxunto de Q), F.○ A = (Q, S, δ, , F) FUNCIONAMENTO DUN AFD A linguaxe dun AFD é o conxunto das cadeas que acepta. p.e: acepta todas as cadeas de 0 e 1 que conteñen a secuencia 01 nalgún lugar. A = ({ , , }, {0, 1}, δ, , { }) DIAGRAMA DE TRANSICIÓNS É un grafo coas seguintes características: Un nodo por cada estado de Q.• Un arco de q a p etiquetado con a para cada δ .• Unha frecha dirixida ao estado inicial.• Os estados finais están marcados por un dobre círculo.• TÁBOA DE TRANSICIÓNS É a representación tabular da función δ. As filas representan os estados e as columnas as entradas. O estado inicial márcase cunha frecha e os finais con asteriscos (*). Pazo INTRODUCIÓN martes, 26 de setembro de 2023 12:33 T2_automatasFinitos página 4 Función de transición: δ• Función de transición estendida: δ Dado un estado q e unha cadea w, devolve un estado p.○ • Definición por indución da función de transición estendida. Base:○ Paso indutivo: ○ • Linguaxe dun AFD: linguaxe regular.• , AUTÓMATAS FINITOS NON DETERMINISTAS (AFN) Non determinista: ten a capacidade de estar en varios estados simultáneamente.• Un AFN: A función de transición (δ) devolve un conxunto de estados; non un só.○ Acepta as linguaxes regulares, igual ca os AFD.○ Son máis compactas e doadas de deseñar ca os AFD.○ Sempre é posible a conversión dun AFN nun AFD.○ A = (Q, ∑, δ, , F) Por exemplo: AFN que acepta as cadeas rematadas en 01. A = ({ , , }, {0, 1}, δ, , { }) FUNCIÓN DE TRANSICIÓN EXTENDIDA Base:• Paso indutivo: • Linguaxe dun AFN:• } AFN CON TRANSICIÓNS ε (AFN-ε) Un AFN con transicións ε proporciona \"facilidades de programación\", mais non expande a clase de linguaxes que aceptan os autómatas formais. Por exemplo: AFN-ε que recoñece decimais. A función de transición (δ) é agora unha función dun estado de Q e un elemento de ∑ ∪ {ε}. • O símbolo ε non pode formar parte do alfabeto.• Pazo EXTENSIÓN A CADEAS xoves, 28 de setembro de 2023 11:12 T2_automatasFinitos página 5 Clausura do estado q respecto de ε, CLAUSε(q): Base: o estado q está en CLAUSε(q).○ Paso indutivo: se δ é a función de transición do AFN-ε, e o estado p está en CLAUSε(q), entón CLAUSε(q) contén todos os estados de δ(p, ε); é dicir: a clausura dun estado é o propio estado máis todos aqueles aos que se poida chegar sen introducir ningunha palabra (ε). ○ TRANSICIÓNS E LINGUAXES EXTENDIDAS Definición recursiva de δ : Base:• Paso indutivo: sexa , onde a é un elemento de ∑ Sexa ○ Sexa ○ • Linguaxe dun AFD-ε, E=(Q, ∑, δ, , F):• Pazo } EXEMPLO NA BUSCA DE TEXTO \"Dado un conxunto de palabras, atopar todos os documentos que conteñen unha ou máis delas.\" Características que fan apropiado o uso de autómatas nunha aplicación: O repositorio a analizar cambia rápidamente (noticias do día, robot de compras, ...)• Os documentos non poden ser catalogados: Amazon (páxinas xeradas a partir de consultas).• AFN PARA BUSCA DE TEXTO Estado inicial con transición a si mesmo para cada símbolo de entrada (conxetura).▫ Para cada palabra clave , , ..., hai k estados , , ..., .▫ O estado indicará que a palabra , , ..., foi aceptada.▫ EQUIVALENCIA ENTRE AFD E AFN Toda linguaxe descrita por un AFN de n estados pode ser descrito tamén por un AFD que teña, como máximo, estados. Para demostrar que un AFD pode facer o mesmo ca un AFN constrúense todos os subconxuntos do conxunto de estados do AFN. CONSTRUCIÓN DE SUBCONXUNTOS Teorema: Dado o AFN N=( , ∑, δ , , ), obter o AFD D=( , ∑, δ , { }, ) tal que L(D)=L(N). Estado inicial: conxunto co estado inicial de N.▪ : conxunto de subconxuntos de . Se ten n estados, terá . Elimínanse os estados non accesibles. ▪ : conxunto de subcconxuntos S de tales que .▪ Para cada ⊆ e cada símbolo de entrada a:▪ Teorema: Unha linguaxe L é aceptada por algún AFN se e só se L é aceptada por algún AFD. CLAUSURAS RESPECTO DE ε luns, 9 de outubro de 2023 11:30 T2_automatasFinitos página 6 Base: o conxunto dun elemento que contén o estado inicial de N é accesible.• Paso indutivo: determinamos que o conxunto S de estados é accesible; así que para cada símbolo de entrada a calcúlase o conxunto de estados δ , que tamén van ser accesibles. • ELIMINACIÓN DE TRANSICIÓNS ε é o conxunto de subconxuntos de .• ε( )• • δ p p p • EQUIVALENCIA DE ESTADOS Dous estados p e q dun AFD son equivalentes se, para toda cadea de entrada w, δ é un estado de aceptación se e só se δ é un estado de aceptación. • Teorema: A equivalencia de estados é transitiva. É dicir, que se para un AFD dous estados p e q son equivalentes e q e r tamén, entón p e r son equivalentes. Teorema: Se para cada estado q dun AFD se crea un bloque que contén a q e a todos os estados equivalentes a q, os bloques de estados formarán unha partición do conxunto de estados. Cada estado estará nun único bloque.▫ Todos os membros dun bloque son equivalentes.▫ Dous estados de bloques diferentes non poden ser equivalentes.▫ Conxunto cociente, Q/E: partición do conxunto de estados en clases. Cada clase contén estados equivalentes entre si. EQUIVALENCIA DE LINGUAXES REGULARES Sexan L e M dúas linguaxes representadas dalgunha forma: Convértense as representacións en AFD.1) Compróbase se os estados iniciais de ambos AFD sson equivalentes.2) Se son equivalentes, entón L=M. Se non, serán diferentes.3) Pazo AVALIACIÓN \"PEREZOSA\" luns, 9 de outubro de 2023 22:37 T2_automatasFinitos página 7 Para todo AFD é posible atopar un AFD equivalente con igual ou menos número de estados que acepte a mesma linguaxe. Dito AFD é único. Elimínanse os estados non accesibles dende o inicial.1) Divídese o conxunto de estados Q en bloques de estados mutuamente equivalentes.2) Constrúese o AFD mínimo B equivalente a A, empregando os bloques de estados resultantes como estados do novo AFD. A función de transición de B é , onde S e T son bloques de estados. Calquera bloque de S debe levar con entrada a a un estado de T. a. O estado inicial de B é o bloque [único] que contén o estado inicial de A.b. O conxunto de estados de aceptación de B é o conxunto de bloques que conteñen os estados de aceptación de A. c. 3) Pazo MINIMIZACIÓN DUN AFD luns, 9 de outubro de 2023 23:40 T2_automatasFinitos página 8 Son a descrición alxebraica das linguaxes regulares.• Forma declarativa de expresar as cadeas que queremos aceptar.• Empréganse como linguaxe de entrada en moitos sistemas de proceso de cadeas: Especificación de caracteres no comando grep de UNIX.○ Deseño de analizadores lóxicos mediante Lex ou Flex. Acepta ER (formas das unidades sintácticas) e produce un AFD que recoñece a unidade sintáctica que aparece a continuación na entrada. ▪ ○ Deseño de verificadores do formato de texto en formularios web (JavaScript, Perl, ...)○ • OPERADORES DAS ER As expresións regulares denotan linguaxes: 01* + 10* Representa unha unión, non unha concatenación. Unión de dúas linguaxes L e M, : conxunto de cadeas que pertencen a L, a M ou a ambas.• Concatenación de dúas linguaxes L e M, L.M (ou LM): conxunto de cadeas formadas pola concatenación dunha cadea de L e outra de M. • Clausura, estrela ou clausura de Kleene dunha linguaxe L, L*: conxunto de cadeas formado pola concatenación de calquera número de cadeas de L. Formalmente: Só existen dúas linguaxes con clausura non infinita: , xa que e para ▪ ▪ ○ • Orde de precedencia: () → * → . (concatenación) → ÁLXEBRA DE ER Propiedade conmutativa da unión: □ Propiedade asociativa da unión: □ Propiedade asociativa da concatenación: A concatenación non é conmutativa: ○ □ é o elemento identidade da unión: □ é o elemento identidade da concatenación: □ é o elemento nulo da concatenación: □ Propiedade distributiva pola esquerda da concatenación respecto da unión: □ Propiedade distributiva pola dereita da concatenación respecto da unión: □ Operador idempotente: o resultado de aplicalo a dous valores iguais é o mesmo valor. Propiedade de idempotencia da unión: ○ □ Propiedades relativas ás clausuras: ○ ○ □ ○ ○ CONSTRUCIÓN DE ER Base: As constantes e son ER. e .○ Se a é un símbolo, a é a ER da linguaxe .○ • Paso indutivo: Se E e F son ER, é unha ER e ○ Se E e F son ER, EF é unha ER e ○ Se E é ER, é unha ER e ○ Se E é ER, é unha ER e ○ • ○ ○ Pazo EXPRESIÓNS REGULARES (ER) martes, 10 de outubro de 2023 10:11 T3_linguaxesRegulares página 9 As expresións regulares definen as linguaxes regulares igual ca os autómatas finitos: Toda lingua e definida por un autómata formal (definido, non definido ou con transicións ε) tamén pode definirse mediante unha ER. • Toda linguaxe definida por unha ER pode definirse mediante un autómata formal.• DE AUTÓMATAS FINITOS A ER: Eliminación de estados: nos arcos aparecen ER.• Para cada estado de aceptación , aplícase o proceso de redución. Elimínanse todos os estados excepto e o estado inicial . • Se , • Se o estado inicial é estado de aceptación, haberá que eliminar todos os estados agás o inicial: • A ER desexada é a unión das cadeas obtidas do autómata para cada estado de aceptación.• DE ER A AUTÓMATAS FINITOS: Teorema: toda linguaxe definido por unha ER pode definirse tamén mediante un AF.• Proba: sexa , para ler a ER . Demostrarase que para algún AFN-ε .• Paso indutivo: ▪ • ▪ ▪ Base:• APLICACIÓNS DAS ER Busca de patróns de texto mediante ER que dan unha \"imaxe\" do patrón que se quere recoñecer.• Aplicacións: Analizadores léxicos.○ Busca de textos.○ Software de verificación do formato de texto en formularios web.○ • BUSCA DE PATRÓNS EN TEXTOS Busca eficiente de palabras nun gran repositorio de texto, como a Web.• A notación das ER é valiosa para describir patróns de busca interesantes ou de texto vagamente definidos (porque é posible modificar as ER con pouco esforzo). • Posibilidade de pasar de ER a unha implementación eficiente (autómatas).• p.e.: direcións de rúas en páxinas web Calle|c Avenida|Avda Plaza|Pza \\\\.) [A Z][a z]*( [A Z][a z]*)* [0 9]9]++[A Z]? PazoAUTÓMATAS FINITOS E ER martes, 10 de outubro de 2023 11:26 T3_linguaxesRegulares página 10 Descrición das linguaxes regulares: AFD AFN AFN-ε Expresións regulares Non todas as linguaxes son regulares: Se fose regular, existiría un AF con k estados que a recoñecería. LEMA DO BOMBEO PARA LINGUAXES REGULARES Para unha linguaxe regular [infinito], o cumplimento do lema do bombeo (LB) é unha condición necesaria, pero non suficiente. Teorema: sexa L unha linguaxe regular, entón existe unha constante n (que depende de L) tal que, para toda cadea w pertencente a L, con , podemos dividir w en tres cadeas, w = xyz, de modo que: → → Para todo k ≥ 0, a cadea tamén pertence a L.→ Sempre é posible atopar unha cadea y non baleira e non demasiado lonxe do comezo de w que se pode \"bombear\". APLICACIÓN DO LEMA DO BOMBEO Eliximos unha linguaxe L para a que tratamos de demostrar que non é regular.1) O valor de n é descoñecido, polo que debemos considerar calquera posible valor.2) Eliximos w (podemos empregar n como parámetro). Se para un n suficientemente grande non podemos escoller w, L será regular.a. 3) Repetir para todas as descomposicións: Escoller unha descomposición de w en xyz suxeita ás restricións:: i. ii. a. Se pertence a L para todo valor de k Verifícase o LBi. Non se pode afirmar que a linguaxe sexa regularii. Non é necesario probar con outras descomposicións (remata o algoritmo).iii. b. 4) Se 4.b non se cumpriu para ningunha descomposición, non se verifica o LB e, polo tanto, a linguaxe non é regular. 5) Pazo PROPIEDADES DAS LINGUAXES REGULARES xoves, 19 de outubro de 2023 10:18 T3_linguaxesRegulares página 11 As GIC están formadas por catro compoñentes: O conxunto finito de símbolos non terminais (V) ou variables, que permiten representar subconxuntos da linguaxe ou estados intermedios na xeración das palabras da linguaxe. • O alfabeto de símbolos terminais (T), que son os símbolos finais da linguaxe.• Un conxunto finito de producións ou regras (P), que indican as transformacións posibles dende os símbolos non terminais ás palabras da linguaxe. • O símbolo inicial ou axioma (S) da gramática (unha das variables), a partir da que se obtén calquera palabra da linguaxe. • As regras da gramática están formadas por: Unha variable, cabeza da produción▫ O símbolo de produción →▫ Unha cadea de cero ou máis símbolos terminais, que son o corpo da produción ▫ Pazo DISTINTAS GRAMÁTICAS As distintas gramáticas admiten distintas formas para as producións: Tipo 0: non restrinxida ou recursivamente enumerable. • Tipo 1: sensible ao contexto. • Tipo 2: libre de contexto. • Estamos usando NT como V ! Tipo 3: regular.• GRAMÁTICAS REGULARES As linguaxes regulares poden asociarse a unha gramática de tipo 3 ou regular. Estas gramáticas poden ser lineares pola dereita ou lineares pola esquerda: Unha gramática é linear pola dereita se todas as súas producións son da forma ○ ○ Onde A e B pertencen a V e x Pertence a • Unha gramática é linear pola esquerda se todas as súas producións son da forma ○ ○ • DEFINICIÓN DE GIC xoves, 19 de outubro de 2023 10:50 T4_gramaticasIndependentesDoContexto página 12 Sexa e unha cadea de símbolos terminais e non terminais (variables), onde A está en V e e están en . Sexa unha produción de G. Entón: Unha derivación dunha sentencia é a secuencia de substitucións de non terminais que, partindo do símbolo inicial S, produce como resultado . LINGUAXE DUNHA GRAMÁTICA Se é unha GIC, a linguaxe de G será: Se é unha GIC, calquera cadea , tal que é unha forma sentencial.• A linguaxe L(G) está formada polas formas sentenciais que están en e denomínanse sentencias.• ÁRBORES DE DERIVACIÓN Representación das derivacións en forma de árbore. Sexa . A árbore de derivación para G vai ter as seguintes características: Cada nodo interior está etiquetado cunha variable.▪ Cada folla está etiquetada cunha variable, un terminal ou ε. Neste último caso, debe ser o único fillo do seu nodo proxenitor. ▪ Se un nodo interior está etiquetado con A e os seus fillos están etiquetados con (de esquerda a dereita), entón é unha produción de P. ▪ Exemplo: Exemplo: RESULTADO DUNHA ÁRBORE DE DERIVACIÓN Concatenando as follas dunha árbore (terminais) dende a esquerda obtense a súa cadea resultado, que se deriva dende a raíz (símbolo inicial). Exemplo: APLICACIÓNS DAS GIC Descrición de linguaxes de programación (análise sintáctica).• Linguaxes de marcado (HTML, XML).• Pazo DERIVACIÓNS DUNHA GRAMÁTICA xoves, 26 de outubro de 2023 12:01 T4_gramaticasIndependentesDoContexto página 13 Unha GIC é ambigua se existe polo menos unha cadea W en para a que podemos atopar dúas árbores de derivación distintos coa raíz etiquetada como S e con resultado w. A existencia de derivacións diferentes para unha cadea non supón un defecto na gramática, mais a existencia de árbores de derivación diferentes si. FORMAS NORMAIS PARA GIC Pazo As gramáticas en formas normais poden xerar todas as linguaxes independentes de contexto (LIC). Forma normal de Chomsky▫ Forma normal de Greibach▫ • As gramáticas en formas normais reducen a complexidade para a obtención das derivacións.• Para obter unha gramática en forma normal é necesario realizar unha serie de transformacións que non modifican a linguaxe xerada: Eliminación de producións ε▫ Eliminación de producións unitarias (regras de encadeamento)▫ Eliminación de símbolos inútiles▫ • ELIMINACIÓN DE PRODUCIÓNS ε Unha variable é anulable se ε◊ Algoritmo: Sexa unha GIC.◊ Atoparemos todos o s símbolos anulables de G mediante o seguinte algoritmo: Base: se é unha produción de G, A é anulable Paso indutivo: se existe unha produción na que as son anulables, B é anulable.  Construción dunha gramática sen producións ε: Sexa unha GIC.▪ Determínanse todos os símbolos anulables de G.▪ Constrúese a gramática , onde se determina como segue: Para cada produción onde k ≥ 1, supoñamos que m dos k símbolos son anulables. ○ A nova gramática vai ter versións desta produción (as anulables estarán presentes ou ausentes en todas as combinacións posibles). ○ Se m = k, non se vai incluír o caso de todas as ausentes.○ As producións de P da forma non van estar en .○ Se forma parte da linguaxe, engádese a produción .○ ▪ AMBIGÜIDADE sábado, 28 de outubro de 2023 22:23 T4_gramaticasIndependentesDoContexto página 14 Produción unitaria: , onde A e B son variables. (Engade pasos adicionais nas derivacións) ◊ Pares unitarios: pares de variables A e B tales que , empregando unha secuencia que só fai uso de producións unitarias. ◊ Obtención dos pares unitarios (A, B): Base: (A, A) é un par unitario para toda variable A. Paso indutivo: sexa (A, B) un par unitario e unha produción onde C é unha variable, entón (A, C) é un par unitario.  ◊ Construción dunha gramática sen producións unitarias: Sexa unha GIC.▪ Determínanse todos os pares unitarios de G.▪ Constrúese a gramática , onde se determina como segue: Para cada par unitario (A, B), engadimos a todas as producións , onde é unha produción non unitaria de P. ○ ▪ ELIMINACIÓN DE SÍMBOLOS INÚTILES Un símbolo X é útil para unha gramática se existe algunha derivación da forma , onde w está en . ◊ X é xerador se Todo símbolo terminal é xerador ◊ X é acadable se existe unha derivación para algún α e β.◊ Todo símbolo útil é xerador e acadable.◊ Eliminación de símbolos inútiles: Elimínanse os símbolos non xeradores. Elimínanse os símbolos non acadables. ◊ Cálculo de símbolos xeradores: Sexa unha gramática.▪ Base: todo símbolo de T é xerador.▪ Paso indutivo: dada unha produción , onde todo símbolo de a é xerador, entón A é erador (inclúese o caso a = ε. ▪ Cálculo de símbolos acadables: Sexa unha gramática.▪ Base: S é acadable.▪ Paso indutivo: dada unha variable A acadable, os símbolos dos corpos das producións con A como cabeza serán acadables. ▪ FORMA NORMAL DE CHOMSKY Pazo Toda LIC non baleira ten unha gramática G na que todas as producións teñen unha das formas seguintes: , onde A, B e C son variables.• , onde A é unha variable e a un símbolo terminal.• • Dise que G está en Forma Normal de Chomsky (FNC): Unha cadea de lonxitude n analízase en 2n-1 pasos.→ A árbore de derivación é binaria e a súa profundidade máxima é n.→ Úsase como algoritmo o método CYK.→ ELIMINACIÓN DE PRODUCIÓNS UNITARIAS sábado, 28 de outubro de 2023 23:02 T4_gramaticasIndependentesDoContexto página 15 Pazo Para transformar unha gramática a FNC: Non pode ter producións ε, producións unitarias nin símbolos inútiles.• As súas producións teñen a forma , (xa están en FNC) ou ben un corpo de lonxitude dous ou máis. Vai haber que: Conseguir que nos corpos de lonxitude dous ou máis só aparezan variables.a) Descompor os corpos de lonxitude tres ou máis nunha cascada de producións con corpos onde só aparezan dúas variables. b) • Construción para (a): Construción para (b): Descompóñense as producións da forma para k ≥ 3 nun grupo de producións con dúas variables en cada corpo. ▪ Introdúcense k-2 variables novas, .▪ Reemplázase a produción orixinal polas k-1 producións▪ , ,..., , . FORMA NORMAL DE GREIBACH Toda LIC non baleira é L(G) para algunha gramática G na que todas as producións teñen a forma , onde a é un símbolo terminal e α unha cadea de cero ou máis variables. O uso dunha produción introduce un símbolo terminal nunha forma sentencial: Unha cadea de lonxitude n ten unha derivación de n pasos.→ Un analizador sintáctica descendente parará a profundidade n.→ Nunca vai haber recursividade pola esquerda.→ Para cada símbolo terminal a que apareza nun corpo de lonxitude dous ou máis, créase unha nova variable A. ▪ Esta variable só vai ter a produción .▪ Substitúense as aparicións de a por A sempre que apareza nun corpo de lonxitude maior ou igual ca dous. ▪ TRANSFORMAR UNHA GRAMÁTICA A FNC domingo, 29 de outubro de 2023 12:30 T4_gramaticasIndependentesDoContexto página 16 Pazo Un autómata con pila (AP) é un AFN con transicións ε e cunha pila (LIFO) na que se pode almacenar unha cadea de \"símbolos de pila\". • O AP pode recordar unha cantidade infinita de información.• Os AP recoñecen todos os LIC e só estes (existen linguaxes que non son LIC, coma ).• Funcionamento: Consúmese da entrada un símbolo ou ε Pásase a un novo estado Reemplazase o símbolo no alto da pila por unha cadea (podería ser ε).  DEFINICIÓN FORMAL DO AP : Conxunto finito de estados▪ : Conxunto finito de símbolos de entrada▪ : Alfabeto de pila finito▪ : Función de transición, ▪ : Estado inicial▪ : Símbolo inicial da pila▪ : Conxunto de estados de aceptación▪ DESCRICIÓN INSTANTÁNEA DUN AP : estado actual▪ : entrada que falta por ler▪ : contido da pila (cima á esquerda, fondo á dereita) ▪ LINGUAXES ACEPTADAS POR UN AP Hai dous tipos (equivalentes) de aceptación: Aceptación por estado final: Sexa un AP, para algún estado q de F e calquera cadea de pila α. → Aceptación por pila baleira: Sexa un AP, ε para calquera estado q. → CONVERSIÓN DE BALEIRADO DE PILA A ESTADO FINAL Teorema: Se para algún AP , existe un AP tal que . Proba: , onde se define: 1. Para todo estado q de Q, entrada a de ou a = ε, e símbolos de pila de , contén todos os pares de . 2. Ademáis, contén para todo estado q de Q.3. INTRODUCIÓN AOS AP domingo, 29 de outubro de 2023 13:09 T5_automatasConPila página 17 Pazo Teorema: Sexa a linguaxe dalgún AP , existe un AP tal que . Proba: , onde se define: 1. Para todo estado q de Q, entrada a de ou a = ε, e símbolos de pila de , contén todos os pares de . 2. Para todo estado de aceptación q en F e símbolos de pila en , contén .3. Para todos os símbolos da pila en , 4. Necesidade do novo símbolo inicial de pila: Se o APF baleira a súa pila nun estado non final, non debería recoñecer a secuencia. Se non se engadise o novo símbolo inicial de pila, o APN recoñeceríaa. EQUIVALENCIA ENTRE AP E GIC O obxectivo é demostrar que as tres seguintes linguaxes son todas da mesma clase: Linguaxes independentes de contexto.1) Linguaxes aceptadas por estado final por algún AP.2) Linguaxes aceptadas por baleirado de pila por algún AP.3) A equivalencia de (2) e (3) xa se demostrou.• Tqd que de (1) se segue (3), aínda que non que de (3) se segue (1):• CONVERSIÓN DE GRAMÁTICAS A AP Sexa a GIC , o AP que acepta L(G) por pila baleira será: • defínese por: Para cada variable A, ○ Para cada símbolo terminal a, ○ • AUTÓMATAS CON PILA DETERMINISTAS Os APD aceptan un conxunto de linguaxes a medio camiño entre as linguaxes regulares e as GIC. Os analizadores sintácticos compórtanse xeralmente como APD. Un AP é determinista se: ten como máximo un elemento para calquera q en Q, a en ou , e X en .• Se non está baleiro para algún a en , debe estar baleiro.• CONVERSIÓN DE BALEIRADO DE PILA A ESTADO FINAL luns, 13 de novembro de 2023 20:23 T5_automatasConPila página 18 Pazo Para un LIC, o cumprimento do lema de bombeo (LB) é unha condición necesaria, pero non suficiente. Teorema: sexa L un LIC, existe unha constante n tal que se z é calquera cadea de L de lonxitude |z| ≥ n. Podemos escribir coas seguintes condicións: |vwx | ≤ n1) vx ≠ ε2) Para todo k ≥ 0, está en L3) APLICACIÓN DO LEMA DE BOMBEO Eliximos L da que queremos demostrar que non é LIC.1. O valor de n é descoñecido, polo que debemos considerar calquera posible valor.2. Eliximos z (podemos empregar n como parámetro).3. Repetir para todas as descomposicións: Escoller unha descomposición de z en uvwxy suxeita ás restricións: vx ≠ εi. |vwx | ≤ nii. a. Se pertence a L para todo valor de k: Verifícase o LBi. Non se pode afirmar que a linguaxe sexa independente do contexto.ii. Non é necesario probar con outras descomposicións (remata o algoritmo).iii. b. 4. Se 4.b non se cumpriu para ningunha descomposición, non se verifica o LB e, polo tanto, a linguaxe non é unha LIC. 5. Exemplos de linguaxes non IC: Unha LIC non pode emparellar tres grupos de símbolos de acordo coa súa igualdade ou desigualdade. Unha LIC non pode emparellar dous pares de números iguais de símbolos que se entrelacen. Unha LIC non pode emparellar dúas cadeas de lonxitude arbitraria se as cadeas se escollen dun alfabeto de máis dun símbolo. LEMA DE BOMBEO PARA LIC martes, 14 de novembro de 2023 10:41 T5_automatasConPila página 19 Pazo \" [...] unha ilimitada capacidade de memoria obtida en forma dunha cinta infinita marcada con cadrados, en cada un dos que se podería imprimir un símbolo. En calquera momento hai un símbolo na máquina; chamado símbolo lido. A máquina pode alterar o símbolo lido e o seu comportamento está en parte determinado por el, pero os símbolos noutros lugares da cinta non afectan ao comportamento da máquina. Non obstante, a cinta pode moverse cara adiante e cara atrás a través da máquina, sendo esta unha das operacións elementais da máquina. Polo tanto, calquera símbolo na cinta pode ter finalmente unha oportunidade.\" MÁQUINA DE TURING Unha Máquina de Turing (MT) é un autómata que conta cun dispositivo de almacenamento denominado cinta. Asociada coa cinta, existe unha cabeza de lectura/escritura. A entrada está escrita na cinta ao principio.• A saída escribirase na cinta durante a operación da MT.• : conxunto de estados.→ : alfabeto de entrada.→ : alfabeto da cinta.→ : función de transición (determinista).→ : estado inicial.→ : espazo en branco ( ).→ ⊆ : conxunto de estados finais.→ ⊆ : o alfabeto de entrada é un subconxunto do alfabeto da cinta sen o espazo en branco. : Accións: Escribir o novo símbolo• Cambiar de estado• Mover a cabeza de lectura/escritura (un só desprazamento -esquerda ou dereita- e despois da operación de lectura/escritura) • A MT finaliza o procesamento cando chega a un estado de parada: Non hai transicións definidas para esa combinación de estado e símbolo. a) Asúmase que os estados finais non teñen transicións definidas: unha MT parará sempre que acade un estado final. b) A diferencia dos AF e AP, nunha MT non é necesario ler todo o contido da cinta para aceptar. Descrición instantánea: Estado.○ Contido da cinta (brancos só incluídos se son relevantes). ○ Posición da cabeza de lectura(escritura).○ ALAN TURING: \"máquinas intelixentes\" martes, 14 de novembro de 2023 11:24 T6_maquinasDeTuring página 20 Pazo Os espazos en branco empréganse para delimitar a cadea de entrada. A cadea baleira non forma parte da linguaxe para poder limitar a rexión na que se busca a entrada. → • Se M para nun estado non final.a) M entra nun bucle infinito e non hai parada.b) • COMPUTACIÓN DE FUNCIÓNS Unha función f con dominio D é Turing-computable ou computable sen máis se existe unha MT tal que: para todo Todas as funcións matemáticas comúns, non importa o complicadas que sexan, son Turing-computables.! As MT pódense combinar TESE DE CHURCH-TURING Hipótese: calquera problema de decisión resoluble pode ser transformado nun problema equivalente para unha MT. Argumentos: Calquera problema que se poida resolver nunha computadora tamén se pode resolver nunha MT.- Non se atopou ningún problema resoluble (por un algoritmo) para o que non se puidese escribir un programa para unha MT. - Propuxéronse modelos alternativos de computación, pero ningún probou ser máis potente ca o modelo de MT. - Definición de algoritmo: Un algoritmo para unha función é unha MT, que dada calquera entrada na súa cinta, finalmente se para coa resposta correcta na cinta: para todo Empregando a tese de Church-Turing, podemos substituír na definición \"MT\" por \"programa en C\", \"programa en Java\",... . ▪ MÁQUINA DE TURING E LINGUAXES mércores, 22 de novembro de 2023 19:37 T6_maquinasDeTuring página 21 Pazo MT CON OPCIÓN DE NON-MOVEMENTO Todas as variacións son equivalentes á MT estándar. E indica que a cabeza de lectura/escritura permanece estática (é o mesmo que mover o cabezal á esquerda e á dereita ou viceversa). MT CON CINTA SEMIINFINITA É unha MT cunha cinta limitada por un extremo (se se unen dúas limitadas por lados opostos obtense unha MT estándar). MT CON CINTA DE ENTRADA A entrada está escrita nunha cinta de só lectura (para simular a MT estándar só habería que copiar o contido da cinta de entrada na cinta normal, mais requiriría varias pistas e máis movementos). MT MULTICINTA As pistas pares representan a posición da cabeza nas cintas e as impares o contido (os pasos para a simulación dunha MT estándar son similares aos da variación anterior). [Cinta con 4 pistas: entrada, posición da cabeza l, cinta, posición l/e] Posición de partida: extremo esquerdo da cinta. Busca da posición da cabeza de lectura na pista 2 Lectura do símbolo correspondente na pista 1 e transición de estado. Busca da posición da cabeza de lectura/escritura na pista 4. Lectura do símbolo correspondente na pista 3 e transición de estado. Modificación das pistas para representar o movemento na MT-entrada. Volta á posición de partida para simular o seguinte movemento. MT MULTIDIMANSIONAL A cinta é infinita en máis dunha dimensión. Bidimensional: (A simulación dunha MT estándar emprega 2 cintas, unha para o contido da cinta bidimensional e outra coas direccións asociadas ao contido da pista 1.) MT NON DETERMINISTA (É unha MT con 2n pistas que se pode replicar a si mesma cando sexa necesario. MTD e MTN son equivalentes) OUTROS MODELOS DE MT mércores, 22 de novembro de 2023 20:18 T6_maquinasDeTuring página 22 Pazo GRAMÁTICAS E LINGUAXES SENSIBLES AO CONTEXTO AUTÓMATAS LINEALMENTE ACOTADOS (ALA) As MTU son reprogramables. Dada unha descrición de calquera MT M e unha cadea q, unha MTU pode simular a computación de M para w. Descrición: , sendo o estado inicial e o final.• , sendo un espazo en branco.• Funcionamento: Examínase o contido das cintas 2 e 3: configuración de M.1) Consúltase a cinta 1 para determinar a transición a realizar.2) Modifícanse as cintas 2 e 3 como resultado do movemento realizado.3) Unha MT, dado calquera programa, pode realizar as computacións especificadas e é, polo tanto, un modelo adecuado dunha computadora de propósito xeral. Calquera MT pode ser codificada con 0s e 1s. Gramáticas Sen Restricións (GSR), Producións: ○ • As GSR xeran as LRE (Linguaxes Recursivamente Enumerables).○ Gramáticas Sensibles ao Contexto (GSC), Producións:○ • Unha linguaxe L é sensible ao contexto (LSC) se existe unha GSC tal que ou . ○ As LSC (que non conteñan ) son recoñecidas polos Autómatas Linealmente Acotados (ALA). Restricións no uso da cinta: Funcionamento tipo pila: autómata con pila.□ Uso dunha parte finita da cinta: autómata de estados finitos.□ Uso da parte da cinta ocupada pola cadea de entrada: ALA. Canta maior lonxitude teña a cadea de entrada, maior é o espazo a empregar.○ □ Definición: Un ALA é unha MT determinista coa restrición de que debe conter dous símbolos especiais: [: marcador esquerdo, con transicións do tipo  ]: marcador dereito, con transicións do tipo  Os ALA son máis potentes cós AP e menos cás MT. MT UNIVERSAL (MTU) xoves, 23 de novembro de 2023 13:09 T6_maquinasDeTuring página 23 Pazo : Linguaxe Regular : Linguaxe Determinista Independente de Contexto : Linguaxe Independente de Contexto : Linguaxe Dependente de Contexto : Linguaxe Recursiva : Linguaxe Recursivamente Enumerable LINGUAXES FORMAIS: Xerarquía de Chomsky venres, 24 de novembro de 2023 12:02 T6_maquinasDeTuring página 24 Pazo Unha linguaxe L é recursivamente enumerable (LRE) se existe unha MT que acepta calquera entrada da linguaxe e se para: Se , → Non obstante: Se , a MT parará nun estado non final -rexeitándoa- ou entrara nun bucle infinito.→ Unha linguaxe L sobre un alfabeto é recursiva (LRC) se exite unha MT que acepta L e párase con calquera cadea -párase acéptea ou non-. Hai linguaxes que non son LRE. A demostración é complexa, posto que todas as linguaxes descritas de forma algorítmica son aceptados por MT (e son, polo tanto, LRE). ! COMPUTABILIDADE E DECIDIBILIDADE Unha función f é computable nun dominio se existe unha MT que computa o valor de f para todos os argumentos do dominio. • Se o resultado da computación dun problema é si/non, fálase de decidibilidade/indecibilidade.• Problemas decidibles: existe unha MT que dá a resposta correcta (si/non) para cada argumento do dominio. PROBLEMA DA PARADA EN MT Sexa unha cadea que describe a MT M, e sexa w unha cadea sobre o alfabeto de M; unha solución ao problema de parada sería unha MT H na que, para calesquera e w, se executa a computación: , se M aplicada para w se para.▪ , se M aplicada para w non se para.▪ e son estados finais de H.▪ Non existe ningunha MT H que se comporte como se require para o problema da parada?• problema indecidible Se o problema da parada fose decidible, entón todos os LRE serían LRC.• COMPLEXIDADE COMPUTACIONAL Para determinar a complexidade: usaremos MT, o tamaño do problema será n e interésanos saber cánto aumenta o tempo a medida que aumenta n. Non nos interesa o tempo exacto, senón a orde de magnitude: O(...). Se unha computación ten complexidade temporal T(n), significa que pode ser resolta en non máis de T(n) movementos dunha MT para un tamaño de problema n. LINGUAXES RECURSIVAS E RECURSIVAMENTE ENUMERABLES venres, 24 de novembro de 2023 12:24 T7_decidibilidadeComplexidade página 25 Pazo Dende o punto de vista da decidibilidade, todas as MT son equivalentes. Dende o punto de vista da complexidade, non. Problema da satisfacibilidade (SAT): Expresións en forma normal conxuntiva: : son variables ou as súas negacións.○ • Dada unha expresión e en forma normal conxuntiva, hai algunha asignación de valores ás súas variables que faga e verdadeira? • MT estándar: • MT non determinista: • Unha MT acepta unha linguaxe L en tempo T(n) se calquera cadea de w de L de tamaño n ou menor é aceptada en O(T(n)) movementos. Se a MT é non determinista, para calquera cadea w de L existe polo menos unha secuencia de movementos de lonxitude O(T(|w|)) que leva á aceptación.  Unha linguaxe L pertence á clase TD(T(n)) se hai unha MT multicinta determinista que acepta L en tempo T(n). ➢ Unha linguaxe L pertence á clase TND(T(n)) se hai unha MT multicinta non determinista que acepta L en tempo T(n). ➢ TD(T(n)) ⊆ TND(T(n)) COMPLEXIDADES P E NP • • Linguaxes aceptadas por unha MT determinista en tempo polinómico. Linguaxes aceptadas por unha MT non determinista en tempo polinómico. ⊆ ? Problemas intratables: problemas computables pero que requerirían, para entradas grandes, tal cantidade de recursos (tempo e memoria) que a súa implementación non é viable. Os problemas da clase P son tratables e, o resto, intratables. Unha linguaxe é reducible en tempo polinómico a outra linguaxe se existe unha MT determinista tal que calquera cadea pode ser transformada en tempo polinómico noutra cadea de tal forma que . Se é reducible en tempo polinómico a e , entón → De igual forma, se , entón .→ Unha linguaxe L é NP-completa se e todo é reducible en tempo polinómico a L. MT E COMPLEXIDADE venres, 24 de novembro de 2023 13:15 T7_decidibilidadeComplexidade página 26","libVersion":"0.5.0","langs":""}